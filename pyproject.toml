[build-system]
requires = ["setuptools>=61.2"]
build-backend = "setuptools.build_meta"

[project]
name = "aviary"
version = "0.1.0"
description = "A collection of machine learning models for materials discovery"
authors = [{ name = "Rhys Goodall", email = "rhys.goodall@outlook.com" }]
readme = "README.md"
license = { file = "license" }
keywords = [
  "Graph Neural Network",
  "Machine Learning",
  "Materials Science",
  "Materials Discovery",
  "Materials Informatics",
  "Roost",
  "Self-Attention",
  "Transformer",
  "Wren",
  "Wyckoff positions",
]
classifiers = [
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Physics",
]

requires-python = ">=3.8"
dependencies = [
  "numpy",
  "pandas",
  "pymatgen",
  "scikit_learn",
  "tensorboard",
  "torch_scatter",
  "torch",
  "tqdm",
  "wandb",
]

[project.urls]
Repo = "https://github.com/CompRhys/aviary"

[project.optional-dependencies]
test = ["pytest", "pytest-cov", "matminer"]

[tool.setuptools.packages]
find = { include = ["aviary*"], exclude = ["tests*"] }

[tool.setuptools.package-data]
aviary = ["**/*.json", "**/**/*.json"]

[tool.distutils.bdist_wheel]
universal = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-p no:warnings"

[tool.mypy]
no_implicit_optional = false

[tool.ruff]
target-version = "py38"
line-length = 100
select = [
  "B",   # flake8-bugbear
  "C40", # flake8-comprehensions
  "D",   # pydocstyle
  "E",   # pycodestyle
  "F",   # pyflakes
  "I",   # isort
  "PLE", # pylint error
  "PLW", # pylint warning
  "Q",   # flake8-quotes
  "RUF", # Ruff-specific rules
  "SIM", # flake8-simplify
  "TID", # tidy imports
  "UP",  # pyupgrade
  "W",   # pycodestyle
  "YTT", # flake8-2020
]
ignore = [
  "B904", # Within an except clause, raise exceptions with raise ... from err
  "C408", # Unnecessary dict call - rewrite as a literal
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # Missing docstring in magic method
  "D107", # Missing docstring in __init__
  "D205", # 1 blank line required between summary line and description
  "E731", # Do not assign a lambda expression, use a def
]
pydocstyle.convention = "google"
isort.known-third-party = ["wandb"]

[tool.ruff.per-file-ignores]
"tests/*" = ["D"]
"examples/notebooks/*.py" = ["E402"]
